import streamlit as st
import yfinance as yf
import pandas as pd
import pandas_ta as ta
from datetime import datetime
import time
import pytz

# --- Core Stock Analysis Functions ---

def get_nse_stock_list():
    """Provides a list of NSE stock symbols to scan."""
    nifty_symbols = [
        "RELIANCE.NS", "TCS.NS", "HDFCBANK.NS", "INFY.NS", "HINDUNILVR.NS",
        "ICICIBANK.NS", "KOTAKBANK.NS", "SBIN.NS", "BHARTIARTL.NS", "ITC.NS",
        "ASIANPAINT.NS", "LT.NS", "AXISBANK.NS", "MARUTI.NS", "SUNPHARMA.NS",
        "WIPRO.NS", "ULTRACEMCO.NS", "TITAN.NS", "HCLTECH.NS", "ONGC.NS",
        "BAJFINANCE.NS", "M&M.NS", "POWERGRID.NS", "NTPC.NS", "JSWSTEEL.NS",
        "TATASTEEL.NS", "TECHM.NS", "NESTLEIND.NS", "COALINDIA.NS", "BAJAJFINSV.NS",
        "ADANIENT.NS", "HDFCLIFE.NS", "SBILIFE.NS", "BPCL.NS", "GRASIM.NS",
        "TATAMOTORS.NS", "INDUSINDBK.NS", "CIPLA.NS", "EICHERMOT.NS", "IOC.NS"
    ]
    return nifty_symbols

def analyze_stock_potential(symbol):
    """
    Analyzes a stock's potential to be a top gainer using technical indicators.
    """
    try:
        data = yf.download(
            symbol,
            period="100d",
            progress=False,
            auto_adjust=True
        )

        # --- FIX for MultiIndex Error ---
        # For some tickers, yfinance returns a multi-level index (Ticker, Date).
        # This code detects that and simplifies the index back to just the Date.
        if isinstance(data.index, pd.MultiIndex):
            data.index = data.index.droplevel(0) # Drops the 'Ticker' level

        if data.empty or len(data) < 30:
            return None

        strategy = ta.Strategy(
            name="Momentum and Volume Strategy",
            ta=[
                {"kind": "rsi"},
                {"kind": "macd"},
                {"kind": "obv"},
            ]
        )
        data.ta.strategy(strategy)
        
        latest = data.iloc[-1]

        score = 0
        conditions = []

        if latest['RSI_14'] > 50 and latest['RSI_14'] < 65:
            score += 1
            conditions.append("Good RSI")

        if latest['MACD_12_26_9'] > latest['MACDs_12_26_9']:
            score += 1
            conditions.append("MACD Bullish")

        if data['OBV'].iloc[-5:].pct_change().mean() > 0:
            score += 1
            conditions.append("OBV Rising")
            
        latest_volume = latest['Volume']
        avg_volume_10d = data['Volume'].iloc[-11:-1].mean()
        if latest_volume > avg_volume_10d:
            score += 1
            conditions.append("High Volume")

        if score >= 3:
            return {
                'Date': latest.name.strftime('%d-%b-%Y'),
                'Symbol': symbol,
                'Close': latest['Close'],
                'Volume': latest_volume,
                'RSI_14': latest['RSI_14'],
                'MACD': latest['MACD_12_26_9'],
                'Potential Score': f"{score}/4",
                'Bullish Signs': ", ".join(conditions)
            }
        
        return None

    except Exception as e:
        print(f"-> Error processing {symbol}: {e}")
        return None

# --- Streamlit Web Interface ---

st.set_page_config(page_title="Top Gainer Estimator", layout="wide")
st.title('ðŸ“ˆ Top Gainer Estimator')

IST = pytz.timezone('Asia/Kolkata')
current_time_ist = datetime.now(IST).strftime('%d-%b-%Y, %I:%M %p')
st.write(f"This app analyzes stocks for bullish technical signals to estimate potential top gainers. Last run: **{current_time_ist} (IST)**")

if st.button('Analyze Stock Potential Now', type="primary"):
    stock_list = get_nse_stock_list()
    potential_stocks = []
    
    progress_bar = st.progress(0, text="Initializing analysis...")
    
    with st.spinner('Analyzing stocks... This can take a few minutes.'):
        for i, stock in enumerate(stock_list):
            status_text = f"Analyzing {stock} ({i+1}/{len(stock_list)})..."
            progress_bar.progress((i + 1) / len(stock_list), text=status_text)
            
            result = analyze_stock_potential(stock)
            if result:
                potential_stocks.append(result)
            time.sleep(0.3)

    progress_bar.empty()

    if potential_stocks:
        analysis_date = potential_stocks[0]['Date']
        st.success(f"Analysis complete for **{analysis_date}**! Found {len(potential_stocks)} stocks with high potential.")
        
        df = pd.DataFrame(potential_stocks)
        df = df.sort_values('Potential Score', ascending=False).reset_index(drop=True)
        
        df = df[['Date', 'Symbol', 'Close', 'Volume', 'Potential Score', 'RSI_14', 'Bullish Signs']]
        
        df['Close'] = df['Close'].map('â‚¹{:,.2f}'.format)
        df['Volume'] = df['Volume'].map('{:,.0f}'.format)
        df['RSI_14'] = df['RSI_14'].map('{:.2f}'.format)
        
        st.dataframe(df, use_container_width=True)
    else:
        st.info("Analysis complete. No stocks met the high-potential criteria today.")